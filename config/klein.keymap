#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define FUN  3
#define SYM  4
#define MEDIA  5
#define BLU 6

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <180>;
};

/*                KEY POSITIONS

          ╭────────────────────╮ ╭────────────────────╮
          │  0   1   2   3   4 │ │  5   6   7   8   9 │
          │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
          │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
          ╰───  30  31  32 33* │ │ 34* 35  36  37╭────╯
              ╰────────────────╯ ╰───────────────╯        */

/ {
    combos {
        compatible = "zmk,combos";

        cut {
            bindings = <&kp LG(X)>;
            key-positions = <1 31>;
            layers = <0>;
            timeout-ms = <40>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <2 31>;
            layers = <0>;
            timeout-ms = <40>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <3 31>;
            layers = <0>;
            timeout-ms = <40>;
        };

        leftParet {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <6 7>;
            layers = <0>;
        };

        rightParet {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            layers = <0>;
        };

        minusCombo {
            bindings = <&kp MINUS>;
            key-positions = <32 35>;
            layers = <0>;
        };

        capslock {
            bindings = <&caps_word>;
            key-positions = <4 5>;
            layers = <0>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <10>;
        };

        redo {
            bindings = <&kp LG(Y)>;
            key-positions = <2 3>;
            layers = <0>;
            timeout-ms = <10>;
        };

        printscreen {
            bindings = <&kp LG(LS(N5))>;
            key-positions = <1 2 3>;
            layers = <0>;
            timeout-ms = <40>;
        };

        apos {
            bindings = <&kp APOS>;
            key-positions = <0 1>;
        };
    };

    behaviors {
        rht: repeatHoldTap {
            compatible = "zmk,behavior-hold-tap";
            label = "REPEATHOLDTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>;
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            //          ------------------------------------------------------------------------------------------------------------
            //          |  Q  |  W  |  E   |  R   |  T   |                                           |  Y   |  U    |  I    |  O   |   P   |
            //          |  A  |  S  |  D   |  F   |  G   |                                           |  H   |  J    |  K    |  L   |   '   |
            //          |  Z  |  X  |  C   |  V   |  B   |                                           |  N   |  M    |  ,    |  .   |   /   |
            //                      | ESC  | SPC |  TAB | BOOTLOADER |                         | MUTE | RET | BKSP | DEL |

            bindings = <
&kp Q               &kp W       &kp E       &kp R        &kp T           &kp Y  &kp U        &kp I          &kp O        &kp P
&mt LEFT_CONTROL A  &mt LALT S  &mt LGUI D  &mt LSHFT F  &kp G           &kp H  &mt RSHFT J  &mt RGUI K     &mt RALT L   &mt RIGHT_CONTROL SEMICOLON
&kp Z               &kp X       &kp C       &kp V        &kp B           &kp N  &kp M        &kp COMMA      &kp DOT      &kp SLASH
                                &lt 6 ESC   &lt 5 TAB    &rht NAV SPACE  &none  &kp K_MUTE   &rht NUM BSPC  &lt SYM DEL  &lt FUN RET
            >;

            sensor-bindings =
                <&inc_dec_kp A B>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        nav_layer {
            bindings = <
&kp LG(Z)         &kp LG(X)  &kp LG(C)     &kp LG(V)  &kp LG(Y)  &kp CAPSLOCK  &none     &kp K_CUT  &kp K_COPY  &kp K_PASTE
&kp LEFT_CONTROL  &kp LALT   &kp LEFT_GUI  &kp LSHFT  &trans     &kp LEFT      &kp DOWN  &kp UP     &kp RIGHT   &trans
&trans            &trans     &trans        &trans     &trans     &kp INSERT    &kp HOME  &kp PG_UP  &kp PG_DN   &kp END
                             &trans        &trans     &trans     &none         &kp C_PP  &kp RET    &kp BKSP    &kp DEL
            >;

            sensor-bindings =
                <&inc_dec_kp PG_UP PG_DN>,
                <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        num_layer {
            bindings = <
&kp APOSTROPHE    &kp N7  &kp N8      &kp N9  &kp EQUAL          &trans       &trans      &trans         &trans    &trans
&kp LEFT_BRACKET  &kp N4  &kp N5      &kp N6  &kp RIGHT_BRACKET  &trans       &kp LSHFT   &kp RIGHT_GUI  &kp LALT  &kp RIGHT_CONTROL
&kp GRAVE         &kp N1  &kp N2      &kp N3  &kp BSLH           &trans       &trans      &trans         &trans    &trans
                          &kp PERIOD  &kp N0  &kp MINUS          &bootloader  &kp K_MUTE  &trans         &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        fun_layer {
            bindings = <
&kp F12  &kp F7  &kp F8   &kp F9     &kp PSCRN        &trans  &trans      &trans         &trans    &trans
&kp F11  &kp F4  &kp F5   &kp F6     &kp SYSREQ       &trans  &kp LSHFT   &kp RIGHT_GUI  &kp LALT  &kp RIGHT_CONTROL
&kp F10  &kp F1  &kp F2   &kp F3     &kp PAUSE_BREAK  &trans  &trans      &trans         &trans    &none
                 &kp ESC  &kp SPACE  &kp TAB          &none   &kp K_MUTE  &trans         &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        sym_layer {
            bindings = <
&kp LS(LBKT)   &kp LS(N7)  &kp LS(N8)      &kp LS(N9)  &kp LS(RBKT)   &trans  &trans      &trans    &trans    &trans
&kp LS(SEMI)   &kp LS(N4)  &kp LS(N5)      &kp LS(N6)  &kp LS(EQUAL)  &trans  &kp LSHFT   &kp RGUI  &kp LALT  &kp RIGHT_CONTROL
&kp LS(GRAVE)  &kp LS(N1)  &kp LS(N2)      &kp LS(N3)  &kp LS(BSLH)   &trans  &trans      &trans    &trans    &trans
                           &kp LS(PERIOD)  &kp LS(N0)  &kp LS(MINUS)  &none   &kp K_MUTE  &trans    &trans    &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        media_layer {
            bindings = <
&trans            &trans    &trans        &trans     &kp RG(LS(S))  &trans      &trans        &trans        &trans            &trans
&kp LEFT_CONTROL  &kp LALT  &kp LEFT_GUI  &kp LSHFT  &none          &kp C_PREV  &kp K_VOL_DN  &kp K_VOL_UP  &kp C_NEXT        &trans
&trans            &trans    &trans        &trans     &trans         &trans      &trans        &trans        &trans            &trans
                            &trans        &trans     &trans         &none       &trans        &kp C_STOP    &kp C_PLAY_PAUSE  &kp K_MUTE
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        blu_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans  &bt BT_CLR  &trans      &trans      &trans  &trans
&none   &bt BT_SEL 3  &bt BT_SEL 4  &trans        &trans  &trans      &bt BT_PRV  &bt BT_NXT  &trans  &trans
&none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans      &trans      &trans      &trans  &trans
                      &trans        &trans        &trans  &trans      &trans      &trans      &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp C_BRI_DN C_BRI_UP>,
                <&inc_dec_kp C_BRI_UP C_BRI_DN>;
        };
    };
};
